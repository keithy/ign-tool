#!/usr/bin/env bash

# The groan framework is implemented by a minimal set of scripts.
# All top-level "commands" are exactly the same code but with differing names.
# i.e. `rename-to-your-command-name` and `groan\groan` are identical.
#
# This "Command" script - Provides basic features and redirects `groan <cmd>` to `<cmd>.sub.sh`

# our contribution to help
optionsLongForm=\
"--help    | -h | -?  Usage help for a command
--quiet   | -q       Quiet mode - say nothing
--verbose | -V       Verbose
--debug   | -D       Debug - tell all
--dry-run            # default
--confirm            # not a dry run - perform action
--theme=light        # select an alternate colour theme"

commonOptionsLong=\
"--help --quiet --verbose --debug"
commonOptionsShort=\
"-h     -q      -V        -D"
# STRICT-MODE

# http://redsymbol.net/articles/unofficial-bash-strict-mode/
set -euo pipefail
IFS=$'\n\t'
shopt -s nullglob # make sure globs are empty arrays if nothing is found
set -o allexport

# FUNCTIONS

function identifyPlatform
{
    MACOSX=false
    WINDOWS=false
    LINUX=false

    if [[  -d "/System/Library/Frameworks" ]] ; then
		system=$(uname)
        MACOSX=true
    elif [ -d "/WINDOWS" ] ; then
        WINDOWS=true
    else
        system=$(uname)
        UNIX=true
        export $(cat /etc/os-release)
    fi
}

function needs_sudo() {
    local prompt
    prompt=$(sudo -nv 2>&1)
    if [ $? -eq 0 ]; then
       $DEBUG && echo "User has 'sudo' access."
    elif echo $prompt | grep -q '^sudo:'; then
       $DEBUG && echo "User has sudo (password required)"
    else
       echo "this action requires `sudo` access."
       exit 1
    fi
}

function readLocations # from locations file
{
  commandFile="$1"
  commandDir=$(dirname "$commandFile")
  commandName="${commandFile##*/}" # `basename $commandFile` 

  locations=("${commandFile}.commands") #default
  defaultSubcommand="_default" #default
  defaultDispatch="_dispatch.sh"

  #commandDir commandName globals used within <name>.locations.sh file

  locationsConfig="${commandFile}.locations.sh"

  if [ -f "$locationsConfig" ]; then  
    $DEBUG && echo "Locations< $locationsConfig"
    source "$locationsConfig"
  else 
    $DEBUG && echo "LocationsX $locationsConfig"
  fi
  return 0
}

function readConfig # from the first of the configFileLocations listed in the locations file
{
    for configFile in "${configFileLocations[@]:-}"
    do
        $DEBUG && echo "Config? $configFile"
        if [[ -f "$configFile" ]]; then
                $DEBUG && echo "Config< $configFile"
                source "$configFile"
                break
        fi
    done
}


function readThemes # from 
{
  bold=$''; dim=$''; bold=$''; reset=$''
  for themeFile in "${themePath[@]:-}"
    do
        if [[ -f "$themeFile" ]]
        then
            $DEBUG && echo "Theme< $themeFile"
            source "$themeFile"
        else
            $DEBUG && echo "ThemeX $themeFile"
        fi
    done

  return 0
}

# Args: "${args[@]:+${args[@]}}" # pattern needed when set -u is enabled bash<=4.1
 
function executeScriptPath {

  scriptPath="$1"

  local title="Running"
  $METADATAONLY && title="Metadata<"

  case "${scriptPath##*.}" in
    sh)
        $DEBUG && echo "$title source> $scriptPath ${args[@]:+${args[@]}}"
        sourceScript "${args[@]:+${args[@]}}"
        return
    ;;
    exec)
        $DEBUG && echo "$title exec> $scriptPath ${args[@]:+${args[@]}}"
        exec "$scriptPath" "${args[@]:+${args[@]}}"
        return
    ;;
    su)
        $DEBUG && echo "$title exec> $scriptPath ${args[@]:+${args[@]}}"
        sudo "$scriptPath" "${args[@]:+${args[@]}}"
        return
    ;;
    *)
        $DEBUG && echo "Metadata< ${scriptPath/.sub.*/.meta.sh}"
        source "${scriptPath/.sub.*/.meta.sh}" "${args[@]:+${args[@]}}"

        $SHOWHELP && executeHelp
        $METADATAONLY && return

        $DEBUG && echo "Eval> $scriptPath ${args[@]:+${args[@]}}"
        eval "$scriptPath" "${args[@]:+${args[@]}}"
        exit 0
    ;;
  esac
}

#Sourcing a script is done via this function, so that args are mapped in to $@
function sourceScript
{
    source "$scriptPath"
}

function executeHelp {
  printf "${bold}${brief:-$description}${reset}\n"
  [[ ! -z ${brief+x} ]] && printf "$description\n\n"
  [[ ! -z ${extra+x} ]] && printf "$extra\n\n"
  if [[ ! -z ${options+x} ]]; then
    printf "${bold}common:${reset} ${commonOptionsLong}\n${bold}options:${reset} ${commonOptionsShort}\n$options\n\n"
  else
    printf "${bold}options:${reset}\n${optionsLongForm}\n\n"
  fi
  printf "${bold}usage:${reset}\n${usage}\n"
}

function checkForMarkdownViewer {
    # Check for Markdown Viewer
    [[ -z $(which "${markdownViewerUtility%% *}") ]] && markdownViewerUtility="cat"
    $DEBUG && echo "Markdown viewer: $markdownViewerUtility"
}

# This function should be easy but bash begs to differ: ${args[@]:1}
function shiftArgsIntoNext {
    next=""
    params=()

    if [[ "${#args[@]}" > 0 ]]; then
            for arg in "${args[@]}"
            do 
                    if [ -z "$next" ]; then
                            next="$arg"
                    else
                            params+=("$arg")
                    fi  
            done
    fi
    args=("${params[@]:+${params[@]}}")
}
 
# START

workingDir=$(pwd)

#find the $commandFile and importantly the $commandDir
commandFile="$(cd "${0%/*}" 2>/dev/null; echo "$PWD"/"${0##*/}")"
if [ -L "$commandFile" ]; then
  commandFile=$(readlink -n "$commandFile")
fi

# Parsing options the groan way - initialize all flags to defaults

DEBUG=false
DDEBUG=false
VERBOSE=false
LOUD=true
DRYRUN=true
CONFIRM=false
SHOWHELP=false     #exec command and only display the help metadata
METADATAONLY=false #exec command only as far as the help metadata
THEME=default

# Options processing pattern - search through the arguments for the command and flags

args=()
subcommand=""
for arg in "$@"
do
    case "$arg" in
      -DD|--ddebug)
            DDEBUG=true
      ;;
      --debug | -D)
            DEBUG=true
            VERBOSE=true
            LOUD=true
      ;;
      --help | -h | "-?")
            SHOWHELP=true
            METADATAONLY=true
      ;;
      --verbose | --v | -v | -V )
            DEBUG=false
            VERBOSE=true
            LOUD=true
       ;;
      --quiet | -q)
            LOUD=false
            DEBUG=false
            VERBOSE=false
      ;;
      --dry-run | -dry | --dry)
            DRYRUN=true
            CONFIRM=false
      ;;
      --confirm)
            DRYRUN=false
            CONFIRM=true
      ;;
      --theme=*)
            THEME="${arg##--theme=}"
      ;;
      --*)
        args+=("$arg")
      ;;
      *)
          if [[ "$subcommand" = "" ]]; then
             subcommand="$arg"
          else
             args+=("$arg")
          fi
      ;;
    esac
done
 
readLocations "$commandFile"

breadcrumbs="$commandName"
rootCommandFile="$commandFile"

readConfig
readThemes

$VERBOSE && echo "${bold}SCRIPT${reset}: $workingDir${dim}/${reset}${bold}$commandName${reset}"
 
! $DEBUG && $VERBOSE && [[ -f "$configFile" ]] && echo "Config< $configFile"
 
# handle the default empty case
[ -z "$subcommand" ] && subcommand="$defaultSubcommand"

$DEBUG && echo "Sub-command: '$subcommand'"

for scriptDir in "${locations[@]}" 
do
    dispatcher="$scriptDir/${defaultDispatch}"
    if [ -f "$dispatcher" ]; then
      source "$dispatcher"
    fi
done

$LOUD && echo "Not Found: $breadcrumbs ${bold}$subcommand${reset}"
exit 1

# "This Code is distributed subject to the MIT License, as in http://www.opensource.org/licenses/mit-license.php . 
# Any additional contribution submitted for incorporation into or for distribution with this file shall be presumed
# subject to the same license."
